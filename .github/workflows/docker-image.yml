name: Build and Release

on: 
  push:
    branches: [ master ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build_release:
    name: Build Release Package
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Set up Node.js (for Sass)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Sass
        run: npm install -g sass
        
      - name: Create release directory structure
        run: |
          mkdir -p release
          
      - name: Copy all src files
        run: |
          cp -r src/* release/
          
      - name: Compile Sass to CSS (overwrite copied SCSS)
        run: |
          sass --no-source-map src/html/css/dash.scss:release/html/css/dash.css
          
      - name: Verify CSS compilation
        run: |
          echo "=== Checking CSS files ==="
          ls -la release/html/css/
          echo "=== CSS file content preview ==="
          head -20 release/html/css/dash.css
          
      - name: Clean up development files
        run: |
          find release -name "__pycache__" -type d -exec rm -rf {} + || true
          find release -name "*.pyc" -delete || true
          find release -name ".DS_Store" -delete || true
          find release -name "received" -type d -exec rm -rf {} + || true
          rm -f release/html/css/*.scss || true
          
      - name: Copy config and requirements
        run: |
          cp src/*.ini release/ || true
          cp requirements.txt release/
          
      - name: Create zip archive
        run: |
          cd release
          zip -r ../xrit-rx.zip .
          cd ..
          
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: xrit-rx-release
          path: xrit-rx.zip
          
      - name: Upload to release (if triggered by release)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./xrit-rx.zip
          asset_name: xrit-rx.zip
          asset_content_type: application/zip

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
         
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: zalgar/xrit-rx-docker:latest
