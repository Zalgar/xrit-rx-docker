name: Build and Release

on: 
  push:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'docker/**'
      - '.github/workflows/docker-image.yml'
      - 'requirements.txt'
      - 'Makefile'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  check_version:
    name: Check Version and Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      current_version: ${{ steps.version_check.outputs.version }}
      should_release: ${{ steps.version_check.outputs.should_release }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to compare versions
          
      - name: Extract current version
        id: current_version
        run: |
          VERSION=$(grep -E "^ver = " src/xrit-rx.py | sed 's/ver = "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
          
      - name: Check if version changed
        id: version_check
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          echo "=== Debug: Current version is $CURRENT_VERSION ==="
          
          # Check if this version tag already exists
          if git tag -l | grep -q "^v$CURRENT_VERSION$"; then
            echo "Version $CURRENT_VERSION already has a tag"
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "No existing tag found for v$CURRENT_VERSION"
            
            # Get the previous version from the last commit
            echo "=== Debug: Checking git history ==="
            git log --oneline -5
            echo "=== Debug: Files changed in latest commit ==="
            git diff HEAD~1 HEAD --name-only
            echo "=== Debug: Checking for xrit-rx.py changes ==="
            
            # Check if version line was modified in the latest commit
            if git diff HEAD~1 HEAD --name-only | grep -q "src/xrit-rx.py"; then
              echo "src/xrit-rx.py was modified in latest commit"
              echo "=== Debug: Version line changes ==="
              git diff HEAD~1 HEAD src/xrit-rx.py | grep "ver = " || echo "No version line changes found"
              
              if git diff HEAD~1 HEAD src/xrit-rx.py | grep -q "^[+-]ver = "; then
                echo "Version line was changed"
                
                # Get the old version to compare
                OLD_VERSION=$(git show HEAD~1:src/xrit-rx.py | grep -E "^ver = " | sed 's/ver = "\(.*\)".*/\1/' || echo "unknown")
                echo "Previous version: $OLD_VERSION"
                echo "Current version: $CURRENT_VERSION"
                
                if [ "$OLD_VERSION" != "$CURRENT_VERSION" ]; then
                  echo "Version changed from $OLD_VERSION to $CURRENT_VERSION"
                  echo "changed=true" >> $GITHUB_OUTPUT
                  echo "should_release=true" >> $GITHUB_OUTPUT
                else
                  echo "Version line changed but version is the same"
                  echo "changed=false" >> $GITHUB_OUTPUT
                  echo "should_release=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "xrit-rx.py changed but version line didn't change"
                echo "changed=false" >> $GITHUB_OUTPUT
                echo "should_release=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "src/xrit-rx.py was not modified in latest commit"
              
              # Alternative: Check if this is a new version compared to the latest tag
              LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              if [ -n "$LATEST_TAG" ]; then
                LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
                echo "Latest tag version: $LATEST_VERSION"
                if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
                  echo "Current version $CURRENT_VERSION differs from latest tag $LATEST_VERSION"
                  echo "changed=true" >> $GITHUB_OUTPUT
                  echo "should_release=true" >> $GITHUB_OUTPUT
                else
                  echo "Current version matches latest tag"
                  echo "changed=false" >> $GITHUB_OUTPUT
                  echo "should_release=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "No existing tags found, treating as new version"
                echo "changed=true" >> $GITHUB_OUTPUT
                echo "should_release=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi
          
      - name: Create Release
        if: steps.version_check.outputs.should_release == 'true'
        id: create_release
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          
          # Create and push the tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          
          # Create the release
          gh release create "v$VERSION" \
            --title "xrit-rx v$VERSION" \
            --notes "## xrit-rx v$VERSION

          Automatic release created for version $VERSION.

          ### Changes
          - Version bumped to $VERSION

          ### Downloads
          - \`xrit-rx.zip\` - Standalone release package
          - Docker images available on Docker Hub and GitHub Container Registry" \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Always run this job to provide default outputs when check_version doesn't run
  setup_build:
    name: Setup Build Parameters
    runs-on: ubuntu-latest
    needs: check_version
    if: always()
    outputs:
      should_build: ${{ steps.build_decision.outputs.should_build }}
      should_docker: ${{ steps.build_decision.outputs.should_docker }}
      current_version: ${{ steps.build_decision.outputs.current_version }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Extract current version
        id: extract_version
        run: |
          VERSION=$(grep -E "^ver = " src/xrit-rx.py | sed 's/ver = "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
          
      - name: Make build decisions
        id: build_decision
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if we should build based on the trigger
          if [ "${{ github.event_name }}" = "release" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "should_docker=true" >> $GITHUB_OUTPUT
          elif [ "${{ needs.check_version.result }}" = "success" ] && [ "${{ needs.check_version.outputs.should_release }}" = "true" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "should_docker=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "should_docker=false" >> $GITHUB_OUTPUT
          fi

  build_release:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: [check_version, setup_build]
    if: always() && (needs.setup_build.outputs.should_build == 'true')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Set up Node.js (for Sass)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Sass
        run: npm install -g sass
        
      - name: Create release directory structure
        run: |
          mkdir -p release
          
      - name: Copy all src files
        run: |
          cp -r src/* release/
          echo "=== Verifying src copy completed ==="
          ls -la release/
          echo "=== Checking if tools directory exists ==="
          ls -la release/tools/ || echo "Tools directory not found!"
          
      - name: Compile Sass to CSS (overwrite copied SCSS)
        run: |
          sass --no-source-map release/html/css/dash.scss:release/html/css/dash.css
          
      - name: Verify CSS compilation
        run: |
          echo "=== Checking CSS files ==="
          ls -la release/html/css/
          echo "=== CSS file content preview ==="
          head -30 release/html/css/dash.css
          echo "=== Checking for progress styles ==="
          grep -A 5 -B 5 "progress" release/html/css/dash.css || echo "No progress styles found"
          
      - name: Clean up development files
        run: |
          find release -name "__pycache__" -type d -exec rm -rf {} + || true
          find release -name "*.pyc" -delete || true
          find release -name ".DS_Store" -delete || true
          find release -name "received" -type d -exec rm -rf {} + || true
          rm -f release/html/css/*.scss || true
          
      - name: Verify tools directory contents
        run: |
          echo "=== Checking tools directory contents ==="
          ls -la release/tools/
          echo "=== Checking for timelapse scripts ==="
          ls -la release/tools/timelapse* || echo "No timelapse scripts found"
          echo "=== Full release directory structure ==="
          find release -type f | head -20
          
      - name: Copy config and requirements
        run: |
          cp src/*.ini release/ || true
          cp requirements.txt release/
          
      - name: Set executable permissions for scripts
        run: |
          chmod +x release/tools/*.py || true
          chmod +x release/tools/*.sh || true
          echo "=== Verifying script permissions ==="
          ls -la release/tools/timelapse* || echo "No timelapse scripts found"
          
      - name: Create zip archive
        run: |
          cd release
          zip -r ../xrit-rx.zip .
          cd ..
          
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: xrit-rx-release
          path: xrit-rx.zip
          
      - name: Upload to release (if triggered by release)
        if: github.event_name == 'release'
        run: |
          gh release upload ${{ github.event.release.tag_name }} xrit-rx.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload to automatic release
        if: needs.check_version.result == 'success' && needs.check_version.outputs.should_release == 'true'
        run: |
          VERSION="${{ needs.setup_build.outputs.current_version }}"
          gh release upload "v$VERSION" xrit-rx.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push_to_registry:
    name: Push Docker image to Docker Hub and GitHub Container Registry
    runs-on: ubuntu-latest
    needs: [check_version, setup_build, build_release]
    # Run Docker build on releases, manual workflow dispatch, or automatic version releases
    if: always() && (needs.setup_build.outputs.should_docker == 'true')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
         
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Determine Docker tags
        id: docker_tags
        run: |
          # Convert repository name to lowercase for ghcr.io
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          if [ "${{ github.event_name }}" = "release" ]; then
            # Manual release
            echo "tags=zalgar/xrit-rx-docker:latest,zalgar/xrit-rx-docker:${{ github.event.release.tag_name }},ghcr.io/${REPO_LOWER}:latest,ghcr.io/${REPO_LOWER}:${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ needs.check_version.result }}" = "success" ] && [ "${{ needs.check_version.outputs.should_release }}" = "true" ]; then
            # Automatic version release
            VERSION="${{ needs.setup_build.outputs.current_version }}"
            echo "tags=zalgar/xrit-rx-docker:latest,zalgar/xrit-rx-docker:v${VERSION},ghcr.io/${REPO_LOWER}:latest,ghcr.io/${REPO_LOWER}:v${VERSION}" >> $GITHUB_OUTPUT
          else
            # Manual workflow dispatch
            echo "tags=zalgar/xrit-rx-docker:latest,ghcr.io/${REPO_LOWER}:latest" >> $GITHUB_OUTPUT
          fi
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
